// Unrestricted Use - Property of AECL
//
// NeutronHit.hh
// GEANT4 - geant4.9.3.p01
//
// Header File for Neutron Hit Data Storage
//      Contains class functions/variables
//
// --------------------------------------------------------
//      Version 1.01 - 2011/04/29 - A. Ho
//      Edited for clarity 2014/07 M. P. Mendenhall
// --------------------------------------------------------

#ifndef NeutronHit_H
/// Assure header is only loaded once
#define NeutronHit_H

#include "G4VHit.hh"

#include "G4THitsCollection.hh"
#include "G4Allocator.hh"
#include "G4ThreeVector.hh"

#include <vector>
#include <map>
#include "globals.hh"

class G4AttDef;
class G4AttValue;
using std::vector;
using std::map;

class NeutronHit : public G4VHit {
public:
    /// Constructor
    NeutronHit();

    int operator==(const NeutronHit &right) const { return trackID==right.trackID; }
    void operator+=(const NeutronHit &right);
    
    inline void* operator new(size_t) { return (void*)NeutronHitAllocator.MallocSingle(); }
    inline void operator delete(void* aHit) { NeutronHitAllocator.FreeSingle((NeutronHit*) aHit); }
    
    virtual void Draw();
    
    virtual const map<G4String,G4AttDef>* GetAttDefs() const; ///< stores incoming data
    virtual vector<G4AttValue>* CreateAttValues() const;
    
    void SetEnergy(G4double E) { energy = E; }
    void SetInitialPosition(G4ThreeVector pos) { positionI = pos; }
    void SetFinalPosition(G4ThreeVector pos) { positionF = pos; }
    void SetEntryTime(G4double bt) { bTime = bt; }
    void SetTrackTime(G4double t) { time = t; }
    void SetTrackID(G4int id) { trackID = id; }
    void SetThermalizationTime(G4double tt) { tTherm = tt; }
    void SetGammasGenerated(G4int gam) { nGamma = gam; }
    void SetLeft(G4bool l) { left = l; }
    void SetCaptured(G4bool cap) { captured = cap; }
    void SetForeign(G4bool ext) { foreign = ext; }
    void SetZenithAngle(G4double ang) { zenith = ang; }
    
    G4double GetEnergy() const { return energy; }
    G4ThreeVector GetInitialPosition() const { return positionI; }
    G4ThreeVector GetFinalPosition() const { return positionF; }
    G4double GetEntryTime() const { return bTime; }
    G4double GetTrackTime() const { return (time - bTime); }
    G4int GetTrackID() const { return trackID; }
    G4double GetThermalizationTime() const { return tTherm; }
    G4int GetGammasGenerated() const { return nGamma; }
    G4bool GetLeft() const { return left; }
    G4bool GetCaptured() const { return captured; }
    G4bool GetForeign() const { return foreign; }
    G4double GetZenithAngle() const { return zenith; }
    
private:

    G4double energy;
    G4ThreeVector positionI;    ///< initial position
    G4ThreeVector positionF;    ///< final position
    G4double bTime;
    G4double time;
    G4int trackID;
    G4double tTherm;
    G4bool left;                ///< flag if escaped detector
    G4bool captured;            ///< flag if captured
    G4int nGamma;               ///< number of gammas generated by capture
    G4bool foreign;
    G4double zenith;
    
    static G4Allocator<NeutronHit> NeutronHitAllocator;         ///< specialized allocator for NeutronHit objects
};

typedef G4THitsCollection<NeutronHit> NeutronHitsCollection;    ///< Provides the type definition to create a hit collection

#endif
